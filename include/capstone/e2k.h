#ifndef CAPSTONE_E2K_H
#define CAPSTONE_E2K_H

#ifdef __cplusplus
extern "C" {
#endif

#include "cs_operand.h"
#include "platform.h"

#define E2K_MAX_OPS 5

/// Operand type for instruction's operands
typedef enum e2k_op_type {
	E2K_OP_INVALID = 0,

	E2K_OP_REG,
	E2K_OP_PREG,
	E2K_OP_CTPR,
	E2K_OP_IMM,

} e2k_op_type;

//> E2K registers
typedef enum e2k_reg {
	E2K_REG_INVALID = 0,

	///> Window Based GPRs
	E2K_REG_B0,
	E2K_REG_B1,
	E2K_REG_B2,
	E2K_REG_B3,
	E2K_REG_B4,
	E2K_REG_B5,
	E2K_REG_B6,
	E2K_REG_B7,
	E2K_REG_B8,
	E2K_REG_B9,
	E2K_REG_B10,
	E2K_REG_B11,
	E2K_REG_B12,
	E2K_REG_B13,
	E2K_REG_B14,
	E2K_REG_B15,
	E2K_REG_B16,
	E2K_REG_B17,
	E2K_REG_B18,
	E2K_REG_B19,
	E2K_REG_B20,
	E2K_REG_B21,
	E2K_REG_B22,
	E2K_REG_B23,
	E2K_REG_B24,
	E2K_REG_B25,
	E2K_REG_B26,
	E2K_REG_B27,
	E2K_REG_B28,
	E2K_REG_B29,
	E2K_REG_B30,
	E2K_REG_B31,
	E2K_REG_B40,
	E2K_REG_B41,
	E2K_REG_B42,
	E2K_REG_B43,
	E2K_REG_B44,
	E2K_REG_B45,
	E2K_REG_B46,
	E2K_REG_B47,
	E2K_REG_B48,
	E2K_REG_B49,
	E2K_REG_B50,
	E2K_REG_B51,
	E2K_REG_B52,
	E2K_REG_B53,
	E2K_REG_B54,
	E2K_REG_B55,
	E2K_REG_B56,
	E2K_REG_B57,
	E2K_REG_B58,
	E2K_REG_B59,
	E2K_REG_B60,
	E2K_REG_B61,
	E2K_REG_B62,
	E2K_REG_B63,
	E2K_REG_B64,
	E2K_REG_B65,
	E2K_REG_B66,
	E2K_REG_B67,
	E2K_REG_B68,
	E2K_REG_B69,
	E2K_REG_B70,
	E2K_REG_B71,
	E2K_REG_B72,
	E2K_REG_B73,
	E2K_REG_B74,
	E2K_REG_B75,
	E2K_REG_B76,
	E2K_REG_B77,
	E2K_REG_B78,
	E2K_REG_B79,
	E2K_REG_B80,
	E2K_REG_B81,
	E2K_REG_B82,
	E2K_REG_B83,
	E2K_REG_B84,
	E2K_REG_B85,
	E2K_REG_B86,
	E2K_REG_B87,
	E2K_REG_B88,
	E2K_REG_B89,
	E2K_REG_B90,
	E2K_REG_B91,
	E2K_REG_B92,
	E2K_REG_B93,
	E2K_REG_B94,
	E2K_REG_B95,
	E2K_REG_B96,
	E2K_REG_B97,
	E2K_REG_B98,
	E2K_REG_B99,
	E2K_REG_B100,
	E2K_REG_B101,
	E2K_REG_B102,
	E2K_REG_B103,
	E2K_REG_B104,
	E2K_REG_B105,
	E2K_REG_B106,
	E2K_REG_B107,
	E2K_REG_B108,
	E2K_REG_B109,
	E2K_REG_B110,
	E2K_REG_B111,
	E2K_REG_B112,
	E2K_REG_B113,
	E2K_REG_B114,
	E2K_REG_B115,
	E2K_REG_B116,
	E2K_REG_B117,
	E2K_REG_B118,
	E2K_REG_B119,
	E2K_REG_B120,
	E2K_REG_B121,
	E2K_REG_B122,
	E2K_REG_B123,
	E2K_REG_B124,
	E2K_REG_B125,
	E2K_REG_B126,
	E2K_REG_B127,

	///> Window GPRs
	E2K_REG_R0,
	E2K_REG_R1,
	E2K_REG_R2,
	E2K_REG_R3,
	E2K_REG_R4,
	E2K_REG_R5,
	E2K_REG_R6,
	E2K_REG_R7,
	E2K_REG_R8,
	E2K_REG_R9,
	E2K_REG_R10,
	E2K_REG_R11,
	E2K_REG_R12,
	E2K_REG_R13,
	E2K_REG_R14,
	E2K_REG_R15,
	E2K_REG_R16,
	E2K_REG_R17,
	E2K_REG_R18,
	E2K_REG_R19,
	E2K_REG_R20,
	E2K_REG_R21,
	E2K_REG_R22,
	E2K_REG_R23,
	E2K_REG_R24,
	E2K_REG_R25,
	E2K_REG_R26,
	E2K_REG_R27,
	E2K_REG_R28,
	E2K_REG_R29,
	E2K_REG_R30,
	E2K_REG_R31,
	E2K_REG_R40,
	E2K_REG_R41,
	E2K_REG_R42,
	E2K_REG_R43,
	E2K_REG_R44,
	E2K_REG_R45,
	E2K_REG_R46,
	E2K_REG_R47,
	E2K_REG_R48,
	E2K_REG_R49,
	E2K_REG_R50,
	E2K_REG_R51,
	E2K_REG_R52,
	E2K_REG_R53,
	E2K_REG_R54,
	E2K_REG_R55,
	E2K_REG_R56,
	E2K_REG_R57,
	E2K_REG_R58,
	E2K_REG_R59,
	E2K_REG_R60,
	E2K_REG_R61,
	E2K_REG_R62,
	E2K_REG_R63,

	///> Global GPRs
	E2K_REG_G0,
	E2K_REG_G1,
	E2K_REG_G2,
	E2K_REG_G3,
	E2K_REG_G4,
	E2K_REG_G5,
	E2K_REG_G6,
	E2K_REG_G7,
	E2K_REG_G8,
	E2K_REG_G9,
	E2K_REG_G10,
	E2K_REG_G11,
	E2K_REG_G12,
	E2K_REG_G13,
	E2K_REG_G14,
	E2K_REG_G15,
	E2K_REG_G16,
	E2K_REG_G17,
	E2K_REG_G18,
	E2K_REG_G19,
	E2K_REG_G20,
	E2K_REG_G21,
	E2K_REG_G22,
	E2K_REG_G23,
	E2K_REG_G24,
	E2K_REG_G25,
	E2K_REG_G26,
	E2K_REG_G27,
	E2K_REG_G28,
	E2K_REG_G29,
	E2K_REG_G30,
	E2K_REG_G31,

	///> Predicate registers
	E2K_REG_P0,
	E2K_REG_P1,
	E2K_REG_P2,
	E2K_REG_P3,
	E2K_REG_P4,
	E2K_REG_P5,
	E2K_REG_P6,
	E2K_REG_P7,
	E2K_REG_P8,
	E2K_REG_P9,
	E2K_REG_P10,
	E2K_REG_P11,
	E2K_REG_P12,
	E2K_REG_P13,
	E2K_REG_P14,
	E2K_REG_P15,
	E2K_REG_P16,
	E2K_REG_P17,
	E2K_REG_P18,
	E2K_REG_P19,
	E2K_REG_P20,
	E2K_REG_P21,
	E2K_REG_P22,
	E2K_REG_P23,
	E2K_REG_P24,
	E2K_REG_P25,
	E2K_REG_P26,
	E2K_REG_P27,
	E2K_REG_P28,
	E2K_REG_P29,
	E2K_REG_P30,
	E2K_REG_P31,

	///> Control transfer prepare registers
	E2K_REG_CTPR1,
	E2K_REG_CTPR2,
	E2K_REG_CTPR3,

	// TODO: AAU registers

	E2K_REG_ENDING,
} e2k_reg;

// Instruction operand
typedef struct cs_e2k_op {
	e2k_op_type type;    ///< operand type
	union {
		e2k_reg reg; ///< register value for REG operand
		int64_t imm;  ///< immediate value for IMM operand
	};
	cs_ac_type access;
} cs_e2k_op;

// Instruction structure
typedef struct cs_e2k {
	// Number of operands of this instruction,
	// or 0 when instruction has no operand.
	uint8_t op_count;
	cs_e2k_op operands[E2K_MAX_OPS]; ///< operands for e2k instruction.
} cs_e2k;

#ifdef __cplusplus
}
#endif

#endif
